#zad 1
lista = [2, 89, 23, 134, 134, 23, 2, 134 , 89, 89, 3, 23, 5, 89]
lista2 = []
def func(lista):
    for i in lista:
        if i not in lista2:
            lista2.append(i)
    return lista2

print("1:",func(lista))

#zad 2
tekst = "romper extreme"
litery = ""
for x in tekst:
    if(x != " "):
        litery += x

tekst = litery[0:len(litery):4]
tekst = tekst[::-1]
print("2:",tekst)

#zad 3
def fibonacci_rek(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fibonacci_rek(n-1)+fibonacci_rek(n-2)

print("3a:", fibonacci_rek(10))

def fibonnaci(n):
    b = 1
    a = 0
    suma = 0
    for x in range(2, n+1):
        b += a
        a = b - a;

    return b

print("3b:",fibonnaci(10))

#zad 4
def funkcja(*args,n):
    iloczyn = 1
    for x in args:
        iloczyn = iloczyn * x**n
    print("4:",iloczyn)

funkcja(1, 2, 3, 4, 5, n=3)

#zad 5

owoce = ['apple', 'banana', 'pomegranate', 'plum', 'orange', 'melon', 'cherry', 'watermelon']
owoce2 = [len(x) for x in owoce if "u" in x or "o" in x]
print("5:",owoce2)

#zad 6
def silnia(n):
    if n == 0:
        return 1
    return n*silnia(n-1)

def newton(n,k):
    if n == k:
        return 1
    if k == 0:
        return 1
    return silnia(n)/(silnia(k)*silnia(n-k))

print("6:",newton(7,2))

#zad 7

class Polynomial:
    def __init__(self,*args):

        self.wielomian=[arg for arg in args]

    def __str__(self):
        output = ''
        maxpotega=len(self.wielomian)-1
        potega=maxpotega
        for element in self.wielomian:
            wyraz = ""
            if potega > 1:
                wyraz += f'{element}x^{potega}'
            elif potega == 1:
                wyraz += f'{element}x'
            else:
                wyraz += str(element)

            if element > 0 and potega != maxpotega:
                output += f'+{wyraz}'
            else:
                output += wyraz
            potega -= 1

        return output

    def __add__(self, other):
        s = []
        l1 = self.wielomian.copy()
        l2 = other.wielomian.copy()
        if len(l1) > len(l2):
            for i in range(0, len(l1)-len(l2)):
                s.append(self.wielomian[i])
        else:
            for i in range(0, len(l2)-len(l1)):
                s.append(other.wielomian[i])

        if len(l1) > len(l2):
            for i in range(0, len(l2)):
                s.append(self.wielomian[i+len(l1)-len(l2)] + other.wielomian[i])
        else:
            for i in range(0, len(l1)):
                s.append(other.wielomian[i] + self.wielomian[i+len(l2)-len(l1)])
        return Polynomial(*s)

wielomian = Polynomial(1, -2, 2)
wielomian1 = Polynomial(-2, 2)
print("7:",wielomian)
print("7:",wielomian1)
print(wielomian+wielomian1)

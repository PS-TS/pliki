zadanie 6.2.13


#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int t[][m]){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
}
int suma(unsigned int n, unsigned int m, int t[][m]){
    int i,j;
    int wynik = 0;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            wynik = wynik + t[i][j];
        }
}return wynik;
    }
int main()
{
    int tablica[3][4] = {{4,7,1,8}, {5,8,1,6}, {9,0,17,53}};
    wypisz(3,4,tablica);
    printf("%d", suma(3,4,tablica));
}


druga wersja 
#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
}
int** alokuj(unsigned int n, unsigned int m){
int **t = malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++)
    {
        t[i] = malloc(m*sizeof(int));
    }
return t;
}
void wczytaj(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",t[i][j]);
        }
    }
}
int suma(unsigned int n, unsigned int m, int **t){
    int i,j;
    int wynik =0;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            wynik = wynik + t[i][j];
        }

    }
    return wynik;
}
int main()
{
    int** tablica = alokuj(3,4);
    wczytaj(3,4,tablica);
    wypisz(3,4,tablica);
    printf("%d", suma(3,4,tablica));
}



zadanie 6.2.16
#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<n;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
int** alokuj(unsigned int n, unsigned int m){
int **t = malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++)
    {
        t[i] = malloc(m*sizeof(int));
    }
return t;
}
void wczytaj(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&t[i][j]);
        }
    }
}
int indeks_wiersza(unsigned int n, unsigned int m, int **t){
    int i,j;
    int suma = 0;
    int maksimum;

    int indeks = 0;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            suma = suma + t[i][j];
        }
        if(i==0){
            maksimum = suma;
        }
        if(suma>maksimum){
            maksimum = suma;
            indeks = i;
        }

    }
    return indeks;
}
int main()
{
    int** tablica = alokuj(3,3);
    wczytaj(3,3,tablica);
    wypisz(3,3,tablica);
    printf("%d", indeks_wiersza(3,3,tablica));
}

zadanie 6.2.17
#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<n;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
int** alokuj(unsigned int n, unsigned int m){
int **t = malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++)
    {
        t[i] = malloc(m*sizeof(int));
    }
return t;
}
void wczytaj(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&t[i][j]);
        }
    }
}
int indeks_wiersza(unsigned int n, unsigned int m, int **t){
    int i,j;
    int suma = 0;
    int maksimum;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            suma = suma + t[i][j];
        }
        if(i==0){
            maksimum = suma;
        }
        if(suma>maksimum){
            maksimum = suma;
        }
    }
    return (float)(maksimum)/m;
}
int main()
{
    int** tablica = alokuj(3,3);
    wczytaj(3,3,tablica);
    wypisz(3,3,tablica);
    printf("%f", indeks_wiersza(3,3,tablica));
}


zadanie 6.2.19
#include <stdio.h>
#include <stdlib.h>
void wypisz2(unsigned int n, unsigned int m, int t[][m]){
       for( int i = 0; i <n; i++){
        for(int j = 0; j < m; j++){
            printf("%d ", t[i][j]);
        }
    printf("\n");
    }
    printf("\n");
}
void przepisz(unsigned int n, unsigned int m, int pierwsza[][m], int druga[][m]){
       for( int i = 0; i <n; i++){
        for(int j = 0; j < m; j++){
            druga[i][j] = pierwsza [i][j];
        }

    }
}

int main()
{
    int tablica1[2][3]= {{5,7,1},{4,8,9}};
    int tablica2[2][3]= {{20,14,5},{1,6,11}};
    wypisz2(2,3,tablica1);
    wypisz2(2,3,tablica2);
    przepisz(2,3,tablica1, tablica2);
    wypisz2(2,3,tablica1);
    wypisz2(2,3,tablica2);
}

zadanie 6.2.20
#include <stdio.h>
#include <stdlib.h>
void wypisz2(unsigned int n, unsigned int m, int t[][m]){
       for( int i = 0; i <n; i++){
        for(int j = 0; j < m; j++){
            printf("%d ", t[i][j]);
        }
    printf("\n");
    }
    printf("\n");
}
void przepisz(unsigned int n, unsigned int m, int pierwsza[][m], int druga[][m]){
    int temp =0;
       for( int i = 0; i <n; i++){
        for(int j = 0; j < m; j++){
            temp = pierwsza [i][j];
            pierwsza[i][j] = druga[i][j];
            druga[i][j]= temp;
        }

    }
}


int main()
{
    int tablica1[2][3]= {{5,7,1},{4,8,9}};
    int tablica2[2][3]= {{20,14,5},{1,6,11}};
    wypisz2(2,3,tablica1);
    wypisz2(2,3,tablica2);
    przepisz(2,3,tablica1, tablica2);
    wypisz2(2,3,tablica1);
    wypisz2(2,3,tablica2);
}


zadanie 6.2.21
#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
}
int** alokuj(unsigned int n, unsigned int m){
int **t = malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++)
    {
        t[i] = malloc(m*sizeof(int));
    }
return t;
}
void wczytaj(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&t[i][j]);
        }
    }
}
void zamien(unsigned int n, unsigned int m, int **tablica){
    int temp =0;
       for( int i = 0; i <n; i++){
        for(int j = 0; j < m/2; j++){
            temp = tablica[i][j];
            tablica[i][j] = tablica[i][m-j-1];
            tablica[i][m-j-1]= temp;
        }

    }
}
int main()
{
    int** tablica = alokuj(2,3);
    wczytaj(2,3,tablica);
    wypisz(2,3,tablica);
    zamien(2,3,tablica);
    wypisz(2,3,tablica);

}

ćwiczenie domowe : odwrócić po kolumnach


zadanie 6.2.23

#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
void wypisz(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t",t[i][j]);
        }
        printf("\n");
    }
     printf("\n");
}
int** alokuj(unsigned int n, unsigned int m){
int **t = malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++)
    {
        t[i] = malloc(m*sizeof(int));
    }
return t;
}
void wczytaj(unsigned int n, unsigned int m, int **t){
    int i,j;
    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d",&t[i][j]);
        }
    }
}
void zamien(unsigned int n, unsigned int m, int **tablica){
    int temp ;

        for(int j = 0; j < m; j++)  {
            temp = tablica[n-1][j];
            for( int i = n-2; i >=0; i--){
            tablica[i+1][j] = tablica[i][j];
        }
        tablica[0][j] = temp;
    }
}

int main()
{
    int** tablica = alokuj(3,3);
    wczytaj(3,3,tablica);
    wypisz(3,3,tablica);
    zamien(3,3,tablica);
    wypisz(3,3,tablica);

}
void odwroc(int **t, unsigned int n, unsigned int m){
    int i;
    for(i=0;i<n;i++){
        swap(n,t[i]);
    }
}

void przesuwanie(unsigned int n, unsigned int m, int ** t){
    int i,j,x;
    for(i=0;i<m;i++){
        x=t[n-1][i];
        for(j-n-1;j>0;j--){
            t[j][i]=t[j-1][i];
            t[0][i]=x;
        }
    }
}

zadanie dodatkowe

int **piramida(int n){
    int dist;
    int **tab=malloc(n*sizeof(int *));
    for(int i=0; i<n;i++){
        tab[i]=malloc(n*sizeof(int));
        for(int j=0;j<n;j++){
                if(i < j){
            int dist=i;
                }
                else{
                    dist=j;
                }
            dist = dist < n - i ? dist :n -i-1;
            dist=dist < n - j ? dist:n-j-1;
            tab[i][j]=dist+1;
        }
    }
    return tab;
}

void print(int **array, int n){
for (int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        printf("%d", array[i][j]);
    }
    printf("\n");
}
}


int main()
{
    int n=5;
    int **arr=piramida(n);
    print(arr,n);

}


ćwiczenie domowe: przerobić na tablice dwuwymiarowe, przerobić na funkcje wiersze w gore,
zrobic 6.2.24

